# Name of your workflow, displayed in the GitHub Actions UI
name: Build & Push Java Spring Boot Docker Image to GHCR

# Event that triggers the 
on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' 
  pull_request:
    branches:
      - main # Also trigger on pull requests to 'main' (good for pre-checks)

# Define environment variables that can be used throughout the workflow
env:
  JAVA_VERSION: '17' # Specify your Java version
  GRADLE_VERSION: '8.7' # Specify your Gradle version
  IMAGE_NAME: 'demo' # Replace with your desired Docker image name
  REGISTRY: ghcr.io # GitHub Container Registry hostname

jobs:
  build-and-push:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    # Permissions needed for the workflow
    permissions:
      contents: read # Allow reading repository content
      packages: write # Allow pushing packages/images to GHCR

    steps:
      # Step 1: Checkout the code
      # This action checks out your repository under $GITHUB_WORKSPACE
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK)
      # This action sets up a Java environment.
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Use Temurin OpenJDK distribution
          java-version: ${{ env.JAVA_VERSION }}

      # Step 3: Set up Gradle build cache for faster builds
      # This action caches Gradle dependencies to speed up subsequent builds.
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          # The 'build-scan' option might be useful for debugging Gradle builds
          # build-scan-enabled: true

      # Step 4: Build the Spring Boot application JAR
      # This runs the Gradle build command. `-x test` to skip tests as they
      # might be run in a separate CI/CD stage or locally.
      - name: Build Spring Boot JAR
        run: gradle clean build --no-daemon -x test

      # --- NEW STEP: Setup Docker Buildx ---
      # This action sets up Docker Buildx, which provides an extended
      # build functionality with BuildKit features, including advanced caching.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Log in to GitHub Container Registry (GHCR)
      # This is required to push Docker images to GHCR.
      # Uses the GITHUB_TOKEN for authentication.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # The GitHub username that triggered the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # The secret token provided by GitHub Actions

      # Step 6: Extract metadata for Docker image (tags, labels)
      # This action helps in generating standard Docker image tags (e.g., ghcr.io/owner/repo:latest)
      # and labels from Git context.
      - name: Extract Docker metadata
        id: meta # Assign an ID to this step to reference its outputs later
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }} # Tag as latest only on default branch
            type=sha,prefix=,suffix=,format=short # Tag with short Git SHA (e.g., d84e56b)
            type=ref,event=branch # Tag with branch name (e.g., main)

      # Step 7: Build and Push the Docker image
      # This uses the Docker Build and Push action.
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository where Dockerfile is
          push: true # Enable pushing to the registry
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by the metadata action
          cache-from: type=gha # Use GitHub Actions cache for Docker layers
          cache-to: type=gha,mode=max # Store Docker layers in GitHub Actions cache
